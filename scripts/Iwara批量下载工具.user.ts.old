// ==UserScript==
// @name                  Iwara 批量下载工具
// @name:zh-HK            Iwara 批量下載工具
// @name:en               Iwara Download Tool
// @name:ja               Iwara バッチダウンローダー
// @description           批量下载 Iwara 视频
// @description:zh-HK     批量下載 Iwara 影片
// @description:en        Download videos from iwara.tv
// @description:ja        Iwara 動画バッチをダウンロード
// @namespace             https://github.com/dawn-lc/user.js
// @updateURL             https://github.com/dawn-lc/user.js/raw/master/Iwara%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B.user.js
// @icon                  https://iwara.tv/sites/all/themes/main/img/logo.png
// @version               1.2.30
// @author                dawn-lc
// @license               Apache-2.0
// @connect               iwara.tv
// @match                 *://*.iwara.tv/users/*
// @match                 *://*.iwara.tv/videos
// @match                 *://*.iwara.tv/videos*page=*
// @match                 *://*.iwara.tv/subscriptions*
// @exclude               *://*.iwara.tv/videos/*
// @grant                 GM_getValue
// @grant                 GM_setValue
// @grant                 GM_listValues
// @grant                 GM_deleteValue
// @grant                 GM_addValueChangeListener
// @grant                 GM_removeValueChangeListener
// @grant                 GM_addStyle
// @grant                 GM_getResourceText
// @grant                 GM_download
// @grant                 GM_xmlhttpRequest
// @grant                 GM_openInTab
// @grant                 GM_info
// @grant                 unsafeWindow
// ==/UserScript==

(async function () {
    debugger
    const library = {
        Net: {
            async get(url: string, parameter: string[] = [], referrer: string, headers: object = {}) {
                referrer = referrer || url
                parameter = parameter || []
                headers = headers || {}
                if (parameter.length != 0) {
                    url += '?'
                    for (var key in parameter) {
                        url += key + '=' + parameter[key] + '&'
                    }
                    url = url.substring(0, url.length - 1)
                }
                let responseData: any
                if (url.split('//')[1].split('/')[0] == window.location.hostname) {
                    responseData = await fetch(url, {
                        'headers': Object.assign({
                            'accept': 'application/json, text/plain, */*',
                            'cache-control': 'no-cache',
                            'content-type': 'application/x-www-form-urlencoded',
                        }, headers),
                        'referrer': referrer,
                        'method': 'GET',
                        'mode': 'cors',
                        'redirect': 'follow',
                        'credentials': 'include'
                    })
                    if (responseData.status >= 200 && responseData.status < 300) {
                        const contentType = responseData.headers.get('Content-Type')
                        if (contentType != null) {
                            if (contentType.indexOf('text') > -1) {
                                return await responseData.text()
                            }
                            if (contentType.indexOf('form') > -1) {
                                return await responseData.formData()
                            }
                            if (contentType.indexOf('video') > -1) {
                                return await responseData.blob()
                            }
                            if (contentType.indexOf('json') > -1) {
                                return await responseData.json()
                            }
                        }
                        return responseData
                    }
                } else {
                    responseData = await new Promise((resolve, reject) => {
                        GM_xmlhttpRequest({
                            method: 'GET',
                            url: url,
                            headers: Object.assign({
                                'accept': 'application/json, text/plain, */*',
                                'cache-control': 'no-cache',
                                'content-type': 'application/x-www-form-urlencoded',
                            }, headers),
                            onload: function (response: any) {
                                resolve(response)
                            },
                            onerror: function (error: any) {
                                reject(error)
                            }
                        })
                    })
                    if (responseData.status >= 200 && responseData.status < 300) {
                        let headers = new Map()
                        responseData.responseHeaders.split('\r\n').forEach((element: any) => {
                            element = element.split(': ')
                            headers.set(element[0], element[1])
                        })
                        responseData.headers = headers
                        return responseData
                    }
                }
            },
            async post(url: string, parameter: any, referrer: string) {
                referrer = referrer || window.location.href
                if (typeof parameter == 'object') parameter = JSON.stringify(parameter)
                let responseData = await fetch(url, {
                    'headers': {
                        'accept': 'application/json, text/plain, */*',
                        'cache-control': 'no-cache',
                        'content-type': 'application/x-www-form-urlencoded',
                    },
                    'referrer': referrer,
                    'body': parameter,
                    'method': 'POST',
                    'mode': 'cors',
                    'redirect': 'follow',
                    'credentials': 'include'
                })
                if (responseData.status >= 200 && responseData.status < 300) {
                    const contentType = responseData.headers.get('Content-Type')
                    if (contentType != null) {
                        if (contentType.indexOf('text') > -1) {
                            return await responseData.text()
                        }
                        if (contentType.indexOf('form') > -1) {
                            return await responseData.formData()
                        }
                        if (contentType.indexOf('video') > -1) {
                            return await responseData.blob()
                        }
                        if (contentType.indexOf('json') > -1) {
                            return await responseData.json()
                        }
                    }
                    return responseData.text()
                }
            },
            getQueryVariable(query: string, variable: string) {
                let vars = query.split('&')
                for (let i = 0; i < vars.length; i++) {
                    let pair = vars[i].split('=')
                    if (pair[0] == variable) { return pair[1]; }
                }
                return ''
            }
        },
        UUID: {
            new() {

            }
        },
        Dom: {
            createElement(detailedList: any) {
                if (detailedList instanceof Array) {
                    return detailedList.map(item => this.createElement(item))
                } else {
                    return this.generateElement(document.createElement(detailedList.nodeType), detailedList)
                }
            },
            generateElement(item: HTMLElement, detailedList: any) {
                for (const i in detailedList) {
                    if (i == 'nodeType') continue
                    if (i == 'childs' && detailedList.childs instanceof Array) {
                        detailedList.childs.forEach((child:any) => {
                            if (child instanceof HTMLElement) item.appendChild(child)
                            else if (typeof (child) == 'string') item.insertAdjacentHTML('beforeend', child)
                            else item.appendChild(this.createElement(child))
                        })
                    } else if (i == 'attribute') {
                        for (const key in detailedList.attribute) {
                            item.setAttribute(key, detailedList.attribute[key])
                        }
                    } else if (i == 'parent') {
                        detailedList.parent.appendChild(item)
                    } else if (i == 'before') {
                        switch (typeof detailedList.before) {
                            case 'object':
                                if (detailedList.before instanceof HTMLElement) {
                                    detailedList.before.insertBefore(item, detailedList.before.childNodes[0])
                                } else {
                                    console.error('before节点异常！')
                                }
                                break
                            case 'string':
                                try {
                                    if (eval(detailedList.before) instanceof HTMLElement) {
                                        eval(detailedList.before).insertBefore(item, eval(detailedList.before).childNodes[0])
                                    } else {
                                        if (document.querySelector(detailedList.before)) {
                                            document.querySelector(detailedList.before).insertBefore(item, document.querySelector(detailedList.before).childNodes[0])
                                        }
                                    }
                                } catch (error) {
                                    console.error('计算before节点失败' + error)
                                }
                                break
                            default:
                                console.error('未知的before节点类型')
                                break
                        }
                    } else if (detailedList[i] instanceof Object && item[i]) {
                        Object.entries(detailedList[i]).forEach(([k, v]) => {
                            item[i][k] = v
                        })
                    } else {
                        item[i] = detailedList[i]
                    }
                }
                return item
            },
            moveElement(newElement: HTMLElement, oldElement: HTMLElement, isMoveChildNode = false) {
                if (isMoveChildNode) {
                    for (let index = 0; index < oldElement.childNodes.length; index++) {
                        newElement.appendChild(oldElement.childNodes[index].cloneNode(true))
                    }
                }
                oldElement.parentNode.replaceChild(newElement, oldElement)
            },
            parseDom(dom: string) {
                return new DOMParser().parseFromString(dom, 'text/html')
            },
            addClass(node: HTMLElement, className: string) {
                if (!node.classList.contains(className)) {
                    node.classList.add(className)
                    node.offsetWidth = node.offsetWidth
                }
            },
            removeClass(node: HTMLElement, className: string) {
                if (node.classList.contains(className)) {
                    node.classList.remove(className)
                    node.offsetWidth = node.offsetWidth
                }
            },
            clearClass(node: HTMLElement) {
                node.classList = null
                node.offsetWidth = node.offsetWidth
            }
        }
    }
    class Queue {
        queue: [];
        push: (data: any) => void;
        pop: () => any;
        remove: (id: any) => void;
        length: () => number;
        clear: () => void;
        constructor() {
            this.queue = []
            this.push = function (data) {
                this.queue.unshift(data as never)
            }
            this.pop = function () {
                return this.queue.pop()
            }
            this.remove = function (id) {
                let index = this.queue.indexOf(id as never)
                if (index > -1) {
                    this.queue.splice(index, 1)
                }
            }
            this.length = function () {
                return this.queue.length
            }
            this.clear = function () {
                this.queue = []
            }
        }
    }
    class UUID {
        new : () => string;
        constructor() {
            this.new = () => {
                let UUID = '';
                for (let index = 0; index < 8; index++) {
                    UUID += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)
                }
                return UUID
            }
        }
    }


    class sourceRender {
        VirtualDOM: object;
        RenderDOM!: HTMLElement;
        constructor(vdata: object) {
            this.VirtualDOM = vdata
            if (vdata instanceof Array) return vdata.map((item: object) => new sourceRender(item))
            for (const item in vdata) {
                switch (item) {
                    case 'nodeType':
                        this.RenderDOM = document.createElement(vdata.nodeType)
                        break
                    case 'parent':
                        vdata.parent.appendChild(this.RenderDOM)
                        break
                    case 'before':
                        vdata.before.insertBefore(this.RenderDOM, vdata.before.childNodes[0])
                        break
                    case 'attributes':
                        for (const key in vdata.attribute) {
                            this.RenderDOM.setAttribute(key, vdata.attribute[key])
                        }
                        break
                    case 'childs':
                        if (vdata.childNodes instanceof Array) {
                            vdata.childNodes.forEach((child: object) => {
                                if (child instanceof HTMLElement) this.RenderDOM.appendChild(child)
                                else if (typeof (child) == 'string') this.RenderDOM.insertAdjacentHTML('beforeend', child)
                                else this.RenderDOM.appendChild(new sourceRender(child))
                            })
                        }
                        break
                    default:
                        if (vdata[item] instanceof Object && this.RenderDOM[item]) {
                            Object.entries(vdata[item]).forEach(([k, v]) => {
                                this.RenderDOM[item][k] = v
                            })
                        } else {
                            this.RenderDOM[item] = vdata[item]
                        }
                }
            }
            return this.RenderDOM
        }
    }

    function getType(obj: any) {
        return Object.prototype.toString.call(obj).split(' ')[1].slice(0, -1)
    }
    /*
    Object.prototype.gettype = function (){ 
        return Object.prototype.toString.call(this).split(' ')[1].slice(0, -1)
    }
    */
    

    function reactRender(vdata: RenderCode, index?: any) { 
        let VirtualDOM: RenderData;
        if (vdata.nodeType != undefined) {
            VirtualDOM = { type: vdata.nodeType }
            delete vdata.nodeType
            if (vdata.childs != undefined) {
                if (VirtualDOM.children == undefined) VirtualDOM.children = []
                if (vdata.childs instanceof Array) {
                    VirtualDOM.children = vdata.childs.map((item: any, index: any) => reactRender(item, index))
                } else {
                    VirtualDOM.children.push(reactRender(vdata.childs))
                }
                delete vdata.childs
            }
            if (vdata.className != undefined) {
                VirtualDOM.props = Object.assign({ className: vdata.className }, VirtualDOM.props || {});
                delete vdata.className
            }
            if (vdata.attribute != undefined) {
                VirtualDOM.props = Object.assign(vdata.attribute, VirtualDOM.props || {});
                delete vdata.attribute
            }
            if (index != undefined) VirtualDOM.props = Object.assign({ key: index }, VirtualDOM.props || {})
            for (const key in vdata) {
                if (VirtualDOM.props == undefined) VirtualDOM.props = {}
                VirtualDOM.props[key] = vdata[key]
                delete vdata[key]
            }
        } else {
            return vdata
        }
        return React.createElement(VirtualDOM.type, VirtualDOM.props, VirtualDOM.children || null);
    }

    /*
    class reactRender {
        VirtualDOM!: RenderData;
        constructor(vdata: RenderCode, index?: any) {
            if (vdata.nodeType != undefined) {
                this.VirtualDOM = { type: vdata.nodeType }
                delete vdata.nodeType
                if (vdata.childs != undefined) {
                    if (this.VirtualDOM.children == undefined) this.VirtualDOM.children = []
                    if (vdata.childs instanceof Array) {
                        this.VirtualDOM.children = vdata.childs.map((item: any, index: any) => new reactRender(item, index))
                    } else {
                        this.VirtualDOM.children.push(new reactRender(vdata.childs))
                    }
                    delete vdata.childs
                }
                if (vdata.className != undefined) {
                    this.VirtualDOM.props = Object.assign({ className: vdata.className }, this.VirtualDOM.props || {});
                    delete vdata.className
                }
                if (vdata.attribute != undefined) {
                    this.VirtualDOM.props = Object.assign(vdata.attribute, this.VirtualDOM.props || {});
                    delete vdata.attribute
                }
                if (index != undefined) this.VirtualDOM.props = Object.assign({ key: index }, this.VirtualDOM.props || {})
                for (const key in vdata) {
                    if (this.VirtualDOM.props == undefined) this.VirtualDOM.props = {}
                    this.VirtualDOM.props[key] = vdata[key]
                    delete vdata[key]
                }
            } else {
                return new String(vdata)
            }
            return React.createElement(this.VirtualDOM.type, this.VirtualDOM.props, this.VirtualDOM.children || null);
        }
    }
    */


    class VideoInfo {
        Element: any
        Page: any
        Source: any
        Url: string
        ID: string
        getID: () => string
        getUrl: () => string
        getAuthor: () => string
        getName: () => string
        Lock: () => boolean
        getDownloadQuality: () => string
        getDownloadUrl: () => string
        getDownloadFileName: () => string
        getComment: () => string
        constructor(Data: string | HTMLElement) {
            switch (getType(Data)) {
                case 'object':
                    this.Element = Data
                    if (this.Element.querySelector('.selectButton') != null) {
                        this.Url = this.Element.querySelector('.selectButton').getAttribute('linkData').split('?')[0]
                    } else {
                        this.Url = this.Element.querySelector('a').href.split('?')[0]
                    }
                    this.ID = this.Url.split('/')[4].toLowerCase();
                    break
                case 'string':
                    this.ID = (Data as string).toLowerCase()
                    this.Url = 'https://ecchi.iwara.tv/videos/' + this.ID
                    break
                default:
                    main.Warning('警告', '错误的类型!')
                    return this
            }
            this.getID = function () { return this.ID }
            this.getUrl = function () { return this.Url }
            this.Page = library.Dom.parseDom(await library.Net.get(this.getUrl(), null, window.location.href))
            this.Lock = function () {
                if (this.Page.querySelector('.well') != null) return true
                return false
            }
            this.getAuthor = function () {
                if (this.Lock()) return this.Element.querySelector('a.username').innerText
                return this.Page.querySelector('.submitted').querySelector('a.username').innerText
            }
            this.getName = function () {
                if (this.Lock()) return this.Element.querySelector('.title').querySelector('a').innerText
                return this.Page.querySelector('.submitted').querySelector('h1.title').innerText
            }
            this.Source = await library.Net.get('https://ecchi.iwara.tv/api/video/' + this.getID(), null, this.getUrl())
            this.getDownloadQuality = function () {
                if (this.Source.length != 0) {
                    return this.Source[0].resolution
                }
                return null
            }
            this.getDownloadUrl = function () { return decodeURIComponent('https:' + this.Source[0].uri); }
            this.getDownloadFileName = function () { return library.Net.getQueryVariable(this.getDownloadUrl(), 'file').split('/')[3]; }
            this.getComment = function () {
                let comment = ''
                try {
                    let commentArea = this.Page.getElementsByClassName('node-info')[0].getElementsByClassName('field-type-text-with-summary field-label-hidden')[0].getElementsByClassName('field-item even')
                    for (let index = 0; index < commentArea.length; index++) {
                        const element = commentArea[index]
                        comment += element.innerText.toLowerCase()
                    }
                } catch (error) {
                    comment = ''
                }
                return comment
            }
        }
        
    }

    enum DownloadType {
        aria2,
        default,
        others
    }
    class PluginControlPanel extends React.Component {
        synclistener: Array<any>;
        state: any;
        style: { radioLabel: { margin: string; }; Line: { margin: string; }; inputLabel: { margin: string; }; input: { width: string; }; };
        constructor(props: any) {
            super(props)
            this.synclistener = []
            this.state = {
                Initialize: GM_getValue('Initialize', false),
                DownloadType: GM_getValue('DownloadType', DownloadType.others),
                DownloadDir: GM_getValue('DownloadDir', ''),
                DownloadProxy: GM_getValue('DownloadProxy', ''),
                WebSocketAddress: GM_getValue('WebSocketAddress', 'ws://127.0.0.1:6800/'),
                WebSocketToken: GM_getValue('WebSocketToken', ''),
                WebSocketID: GM_getValue('WebSocketID', new UUID().new())
            }
            this.style = {
                radioLabel: { margin: '0px 20px 0px 0px' },
                Line: { margin: '10px 0px' },
                inputLabel: { margin: '5px' },
                input: { width: '100%' }
            }
        }
        componentDidMount() {
            let values = GM_listValues()
            for (let index = 0; index < values.length; index++) {
                this.synclistener.push(GM_addValueChangeListener(values[index]!,  (name: string, old_value: any, new_value: any, remote: boolean) => {
                    if (remote && (new_value != this.state[name])) {
                        this.setState({ [name]: new_value })
                        if (name == 'DownloadType' && this.state[name] == DownloadType.aria2 && /((((ws|wss):(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/.test(this.state['WebSocketAddress'])) {
                            if (main.Aria2WebSocket != null) main.Aria2WebSocket.close()
                            main.ConnectionWebSocket()
                        }
                    }
                }))
            }
        }
        componentWillUnmount() {
            for (let index = 0; index < this.synclistener.length; index++) {
                GM_removeValueChangeListener(this.synclistener[index])
            }
        }
        configChange(e: any) {
            this.setState({ [e.name]: e.value })
            if (e.name == 'DownloadType' && e.value == DownloadType.aria2 && /((((ws|wss):(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/.test(this.state['WebSocketAddress'])) {
                if (main.Aria2WebSocket != null) main.Aria2WebSocket.close()
                main.ConnectionWebSocket()
            }
            GM_setValue(e.name, e.value)
        }
        render() {
            return (reactRender({
                nodeType: 'div',
                className: 'controlPanel',
                childs: [{
                    nodeType: 'div',
                    className: 'controlPanel-content',
                    childs: [{
                        nodeType: 'span',
                        className: 'controlPanelClose',
                        childs: 'X',
                        onClick: ({ target }: any) =>  {
                            target.parentNode.parentNode.style.display = 'none'
                        }
                    },
                    {
                        nodeType: 'div',
                        childs: [{
                            nodeType: 'div',
                            style: this.style.Line,
                            childs: [{
                                nodeType: 'label',
                                style: this.style.radioLabel,
                                childs: '下载方式:'
                            },
                            {
                                nodeType: 'input',
                                name: 'DownloadType',
                                type: 'radio',
                                value: DownloadType.aria2,
                                onChange: ({ target }: any) => this.configChange(target)
                            },
                            {
                                nodeType: 'label',
                                style: this.style.radioLabel,
                                childs: 'Aria2'
                            },
                            {
                                nodeType: 'input',
                                name: 'DownloadType',
                                type: 'radio',
                                value: DownloadType.default,
                                onChange: ({ target }: any) => this.configChange(target)
                            },
                            {
                                nodeType: 'label',
                                style: this.style.radioLabel,
                                childs: '浏览器默认'
                            },
                            {
                                nodeType: 'input',
                                name: 'DownloadType',
                                type: 'radio',
                                value: DownloadType.others,
                                onChange: ({ target }: any) => this.configChange(target)
                            },
                            {
                                nodeType: 'label',
                                style: this.style.radioLabel,
                                childs: '其他下载器'
                            }
                            ]
                        }, {
                            nodeType: 'div',
                            style: this.style.Line,
                            childs: [{
                                nodeType: 'label',
                                style: this.style.inputLabel,
                                childs: '下载到:',
                            },
                            {
                                nodeType: 'input',
                                name: 'DownloadDir',
                                type: 'text',
                                value: this.state.DownloadDir,
                                style: this.style.input,
                                onChange: ({ target }: any) => this.configChange(target)
                            }
                            ]
                        }, {
                            nodeType: 'div',
                            style: this.style.Line,
                            childs: [{
                                nodeType: 'label',
                                style: this.style.inputLabel,
                                childs: '代理服务器:',
                            },
                            {
                                nodeType: 'input',
                                name: 'DownloadProxy',
                                type: 'text',
                                value: this.state.DownloadProxy,
                                style: this.style.input,
                                onChange: ({ target }: any) => this.configChange(target)
                            }
                            ]
                        }, {
                            nodeType: 'div',
                            style: this.style.Line,
                            childs: [{
                                nodeType: 'label',
                                style: this.style.inputLabel,
                                childs: 'Aria2 RPC WebSocket 地址:',
                            },
                            {
                                nodeType: 'input',
                                name: 'WebSocketAddress',
                                type: 'text',
                                value: this.state.WebSocketAddress,
                                style: this.style.input,
                                onChange: ({ target }: any) => this.configChange(target)
                            }
                            ]
                        }, {
                            nodeType: 'div',
                            style: this.style.Line,
                            childs: [{
                                nodeType: 'label',
                                style: this.style.inputLabel,
                                childs: 'Aria2 RPC Token(密钥):',
                            },
                            {
                                nodeType: 'input',
                                name: 'WebSocketToken',
                                type: 'password',
                                value: this.state.WebSocketToken,
                                style: this.style.input,
                                onChange: ({ target }: any) => this.configChange(target)
                            }
                            ]
                        }, {
                            nodeType: 'div',
                            style: this.style.Line,
                            childs: [{
                                nodeType: 'label',
                                style: this.style.inputLabel,
                                childs: [
                                    '双击视频选中，再次双击取消选中。选中仅在本页面有效！', { nodeType: 'br'},
                                    '在作者用户页面可以点击下载全部，将会搜索该用户的所有视频进行下载。', { nodeType: 'br' },
                                    '插件下载视频前会检查视频简介，如果在简介中发现疑似第三方下载链接，将会弹窗提示，您可以手动打开视频页面选择。', { nodeType: 'br' },
                                    '手动下载需要您提供视频ID!'
                                ]
                            }]
                        }]
                    }
                    ]
                }]
            }))
        }
    }

    /*
    const resources = {
        PluginStyle: {
            nodeType: 'style',
            innerHTML: `
            .selectButton {
                user-select: none;
                position: relative;
                width: 100%;
                height: 100%;
            }
            .selectButton[checked=true]:before {
                position: absolute;
                display: block;
                width: 100%;
                height: 100%;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                background-color: rgba(150, 150, 150, 0.6);
                content: '';
            }
            .selectButton[checked=true]:after {
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%) scale(1.32, 0.96);
                font-weight: 900;
                font-size: 36px;
                color: rgb(20, 20, 20);
                content: '√';
            }
            
            .tips {
                letter-spacing:3px;
                cursor: pointer;
                box-sizing: border-box;
                display: none;
                width: 100%;
                max-width: 640px;
                font-size: 0.825em;
                border-top-right-radius: 5px;
                border-top-left-radius: 5px;
                background: #ffffff;
                box-shadow: 0 2.8px 2.2px rgba(0, 0, 0, 0.02), 0 6.7px 5.3px rgba(0, 0, 0, 0.028), 0 12.5px 10px rgba(0, 0, 0, 0.035), 0 22.3px 17.9px rgba(0, 0, 0, 0.042), 0 41.8px 33.4px rgba(0, 0, 0, 0.05), 0 100px 80px rgba(0, 0, 0, 0.07);
                -webkit-transition: 0.2s ease-in;
                transition: 0.2s ease-in;
            }
            @media (min-width: 640px) {
                .tips {
                    border-radius: 5px;
                    margin-bottom: 0.5em;
                }
            }
            .tipsActive {
                display: -webkit-box;
                display: flex;
                -webkit-animation: slideinBottom 5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
                animation: slideinBottom 5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
            }
            .tipsWait {
                display: -webkit-box;
                display: flex;
                -webkit-animation: slidein 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
                animation: slidein 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
            }
            .tipsWarning {
                background: #bf360c;
                color: white;
            }
            .tipsSuccess {
                background: #43a047;
                color: white;
            }
            .tipsProgress {
                width: 100%;
                background-color: #ddd;
            }
            .tipsProgress .value {
                text-align: right;
                height: 24px;
                color: white;
                background-color: #2196F3;
                width: 0%;
                -webkit-transition: all 0.2s ease;
                -moz-transition: all 0.2s ease;
                -o-transition: all 0.2s ease;
                transition: all 0.2s ease;
            }
            .tipsProgress :after{
                content: attr(value)"%";
            }
            .tipsActions {
                width: 100%;
                max-width: 768px;
                margin: 0 auto;
                display: -webkit-box;
                display: flex;
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                flex-flow: column;
            }
            @media (min-width: 640px) {
                .tipsActions {
                    -webkit-box-orient: horizontal;
                    -webkit-box-direction: normal;
                    flex-flow: row;
                }
            }
            .tipsContainer {
                z-index: 2147483647;
                box-sizing: border-box;
                padding: 0em 1em;
                position: fixed;
                width: 100%;
                max-width: 640px;
                margin: 0 auto;
                display: -webkit-box;
                display: flex;
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                flex-flow: column;
                bottom: 0;
                left: 0;
                right: 0;
                -webkit-box-align: center;
                align-items: center;
                -webkit-box-pack: center;
                justify-content: center;
            }
            @media (min-width: 640px) {
                .tipsContainer {
                    padding: 0 1em;
                }
            }
            @media (min-width: 1024px) {
                .tipsContainer {
                    left: initial;
                    right: 0;
                }
            }
            .tipsIcon {
                height: 60px;
                width: 60px;
                box-sizing: border-box;
                padding: 1em;
                display: none;
                -webkit-box-align: center;
                    align-items: center;
                -webkit-box-pack: center;
                    justify-content: center;
            }
            .tipsIcon svg {
                height: 100%;
            }
            @media (min-width: 640px) {
                .tipsIcon {
                    display: -webkit-box;
                    display: flex;
                }
            }
            .tipsIcon ~ .tipsContent {
                padding: 1em;
            }
            @media (min-width: 640px) {
                .tipsIcon ~ .tipsContent {
                    padding: 1em 1em 1em 0;
                }
            }
            .tipsContent {
                box-sizing: border-box;
                padding: 1em;
                width: 100%;
            }
            .tipsContent h2 {
                margin: 0 0 0.25em 0;
                padding: 0;
                font-size: 1.2em;
            }
            .tipsContent p {
                margin: 0;
                padding: 0;
                font-size: 1em;
            }
            @-webkit-keyframes slidein {
                0% {
                    opacity: 0;
                    -webkit-transform: translateY(100%);
                            transform: translateY(100%);
                }
                100% {
                    opacity: 1;
                    -webkit-transform: translateY(0);
                            transform: translateY(0);
                }
            }
            @keyframes slidein {
                0% {
                    opacity: 0;
                    -webkit-transform: translateY(100%);
                            transform: translateY(100%);
                }
                100% {
                    opacity: 1;
                    -webkit-transform: translateY(0);
                            transform: translateY(0);
                }
            }
            @-webkit-keyframes slideinBottom {
                0% {
                    opacity: 0;
                    -webkit-transform: translateY(100%);
                            transform: translateY(100%);
                }
                15% {
                    opacity: 1;
                    -webkit-transform: translateY(0);
                            transform: translateY(0);
                }
                85% {
                    opacity: 1;
                    -webkit-transform: translateY(0);
                            transform: translateY(0);
                }
                100% {
                    opacity: 0;
                    -webkit-transform: translateY(100%);
                            transform: translateY(100%);
                }
            }
            @keyframes slideinBottom {
                0% {
                    opacity: 0;
                    -webkit-transform: translateY(100%);
                            transform: translateY(100%);
                }
                15% {
                    opacity: 1;
                    -webkit-transform: translateY(0);
                            transform: translateY(0);
                }
                85% {
                    opacity: 1;
                    -webkit-transform: translateY(0);
                            transform: translateY(0);
                }
                100% {
                    opacity: 0;
                    -webkit-transform: translateY(100%);
                            transform: translateY(100%);
                }
            }
            `,
            parent: document.head
        },
        PluginUI: {
            nodeType: 'div',
            className: 'btn-group',
            childs: [{
                nodeType: 'button',
                type: 'button',
                id: 'PluginUIStartUp',
                title: '批量下载工具',
                className: 'btn btn-primary btn-sm dropdown-toggle',
                childs: [{
                    nodeType: 'span',
                    className: 'glyphicon glyphicon-download-alt'
                }, {
                    nodeType: 'text',
                    innerHTML: '批量下载工具'
                }],
                onclick: function () {
                    if (this.parentNode.classList.contains('open')) {
                        this.parentNode.classList.remove('open')
                    } else {
                        this.parentNode.classList.add('open')
                    }
                }
            },
            {
                nodeType: 'ul',
                className: 'dropdown-menu',
                attribute: {
                    role: 'menu'
                },
                childs: [{
                    nodeType: 'li',
                    style: 'cursor: pointer;',
                    id: 'DownloadSelected',
                    innerHTML: '<a><span class="glyphicon glyphicon-check"></span>下载所选</a>',
                    onclick: function () {
                        main.DownloadSelected()
                        document.getElementById('PluginUIStartUp')!.click()
                    }
                },
                {
                    nodeType: 'li',
                    style: 'display: none;cursor: pointer;',
                    id: 'DownloadAll',
                    innerHTML: '<a><span class="glyphicon glyphicon-save"></span>下载所有</a>',
                    onclick: function () {
                        main.DownloadAll()
                        document.getElementById('PluginUIStartUp')!.click()
                    }
                },
                {
                    nodeType: 'li',
                    style: 'cursor: pointer;',
                    id: 'ManualDownload',
                    innerHTML: '<a><span class="glyphicon glyphicon-edit"></span>手动下载</a>',
                    onclick: function () {
                        main.ManualParseDownloadAddress()
                        document.getElementById('PluginUIStartUp')!.click()
                    }
                },
                {
                    nodeType: 'li',
                    style: 'cursor: pointer;',
                    id: 'pluginSet',
                    innerHTML: '<a><span class="glyphicon glyphicon-cog"></span>设置</a>',
                    onclick: function () {
                        let ControlPanel = document.getElementById('PluginControlPanel')
                        for (let index = 0; index < ControlPanel!.querySelectorAll('input[name=DownloadType]').length; index++) {
                            const element = ControlPanel!.querySelectorAll('input[name=DownloadType]')[index] as HTMLInputElement
                            if (Number(element.value) == config.DownloadType) {
                                element.setAttribute('checked', '')
                                break
                            }
                        }
                        ControlPanel.querySelector("#DownloadDir").value = config.DownloadDir;
                        ControlPanel.querySelector("#DownloadProxy").value = config.DownloadProxy;
                        ControlPanel.querySelector("#WebSocketAddress").value = config.WebSocketAddress;
                        ControlPanel.querySelector("#WebSocketToken").value = config.WebSocketToken;
                        ControlPanel.style.display = 'block'
                        document.getElementById('PluginUIStartUp').click()
                    }
                }]
            }],
            parent: document.getElementById('user-links')
        },
        PluginControlPanel: {
            nodeType: 'div',
            id: 'PluginControlPanel',
            className: 'controlPanel',
            childs: [{
                nodeType: 'div',
                className: 'controlPanel-content',
                childs: [{
                    nodeType: 'span',
                    className: 'controlPanelClose',
                    innerHTML: '&times;',
                    onclick: function () {
                        config.setDownloadType(config.DownloadType)
                        config.setDownloadDir(config.DownloadDir)
                        config.setDownloadProxy(config.DownloadProxy)
                        config.setWebSocketAddress(config.WebSocketAddress)
                        config.setWebSocketToken(config.WebSocketToken)
                        config.setWebSocketID(config.WebSocketID)
                        config.setInitialize(true)
                        this.parentNode.parentNode.style.display = 'none'
                        main.run()
                    }
                },
                {
                    nodeType: 'div',
                    id: 'controlPanelItem',
                    childs: [{
                        nodeType: 'div',
                        style: 'margin: 10px 0;',
                        childs: [
                            {
                                nodeType: 'label',
                                style: 'margin: 0px 10px 0px 0px;',
                                innerHTML: '下载方式:'
                            },
                            {
                                nodeType: 'input',
                                name: 'DownloadType',
                                type: 'radio',
                                value: config.Type.Download.aria2,
                                onchange: ({ target }) => config.setDownloadType(target.value)
                            },
                            {
                                nodeType: 'label',
                                style: 'margin: 0px 20px 0px 0px;',
                                innerHTML: 'Aria2'
                            },
                            {
                                nodeType: 'input',
                                name: 'DownloadType',
                                type: 'radio',
                                value: config.Type.Download.default,
                                onchange: ({ target }) => config.setDownloadType(target.value)
                            },
                            {
                                nodeType: 'label',
                                style: 'margin: 0px 20px 0px 0px;',
                                innerHTML: '浏览器默认'
                            },
                            {
                                nodeType: 'input',
                                name: 'DownloadType',
                                type: 'radio',
                                value: config.Type.Download.others,
                                onchange: ({ target }) => config.setDownloadType(target.value)
                            },
                            {
                                nodeType: 'label',
                                style: 'margin: 0px 20px 0px 0px;',
                                innerHTML: '其他下载器'
                            }
                        ]
                    }, {
                        nodeType: 'div',
                        style: 'margin: 10px 0;',
                        childs: [
                            {
                                nodeType: 'label',
                                style: 'margin-right: 5px;',
                                innerHTML: '下载到:',
                                for: 'DownloadDir'
                            },
                            {
                                nodeType: 'input',
                                id: 'DownloadDir',
                                type: 'text',
                                value: config.DownloadDir,
                                onchange: ({ target }) => config.setDownloadDir(target.value),
                                style: 'width:100%;'
                            }
                        ]
                    }, {
                        nodeType: 'div',
                        style: 'margin: 10px 0;',
                        childs: [
                            {
                                nodeType: 'label',
                                style: 'margin-right: 5px;',
                                innerHTML: '代理服务器:',
                                for: 'DownloadProxy'
                            },
                            {
                                nodeType: 'input',
                                id: 'DownloadProxy',
                                type: 'text',
                                value: config.DownloadProxy,
                                onchange: ({ target }) => config.setDownloadProxy(target.value),
                                style: 'width:100%;'
                            }
                        ]
                    }, {
                        nodeType: 'div',
                        style: 'margin: 10px 0;',
                        childs: [
                            {
                                nodeType: 'label',
                                style: 'margin-right: 5px;',
                                innerHTML: 'Aria2 RPC WebSocket 地址:',
                                for: 'WebSocketAddress'
                            },
                            {
                                nodeType: 'input',
                                id: 'WebSocketAddress',
                                type: 'text',
                                value: config.WebSocketAddress,
                                onchange: ({ target }) => config.setWebSocketAddress(target.value),
                                style: 'width:100%;'
                            }
                        ]
                    }, {
                        nodeType: 'div',
                        style: 'margin: 10px 0;',
                        childs: [
                            {
                                nodeType: 'label',
                                style: 'margin-right: 5px;',
                                innerHTML: 'Aria2 RPC Token(密钥):',
                                for: 'WebSocketToken'
                            },
                            {
                                nodeType: 'input',
                                id: 'WebSocketToken',
                                type: 'password',
                                value: config.WebSocketToken,
                                onchange: ({ target }) => config.setWebSocketToken(target.value),
                                style: 'width:100%;'
                            }
                        ]
                    }, {
                        nodeType: 'div',
                        style: 'margin: 10px 0;',
                        childs: [
                            {
                                nodeType: 'label',
                                style: 'margin-right: 5px;',
                                innerHTML: '双击视频选中，再次双击取消选中。选中仅在本页面有效！<br />在作者用户页面可以点击下载全部，将会搜索该用户的所有视频进行下载。<br />插件下载视频前会检查视频简介，如果在简介中发现疑似第三方下载链接，将会弹窗提示，您可以手动打开视频页面选择。<br />手动下载需要您提供视频ID!'
                            }
                        ]
                    }]
                }]
            }],
            parent: document.body
        },
        PluginTips: {
            nodeType: 'section',
            id: 'PluginTips',
            className: 'tipsContainer',
            childs: [],
            parent: document.body
        },
        Tips: {
            Info: {
                nodeType: 'div',
                className: 'tips',
                childs: [{
                    nodeType: 'div',
                    className: 'tipsIcon',
                    innerHTML: '<svg focusable="false" data-prefix="fas" data-icon="info-circle" class="svg-inline--fa fa-info-circle fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"></path></svg>'
                }, {
                    nodeType: 'div',
                    className: 'tipsContent',
                    childs: [{
                        nodeType: 'h2',
                    }, {
                        nodeType: 'p',
                    }]
                }],
                onclick: function () {
                    this.remove()
                },
                onwebkitanimationend: function () {
                    if (!this.classList.contains('tipsWait')) {
                        this.remove()
                    }
                }
            },
            Warning: {
                nodeType: 'div',
                className: 'tips tipsWarning',
                childs: [{
                    nodeType: 'div',
                    className: 'tipsIcon',
                    innerHTML: '<svg focusable="false" data-prefix="fas" data-icon="exclamation-circle" class="svg-inline--fa fa-exclamation-circle fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"></path></svg>'
                }, {
                    nodeType: 'div',
                    className: 'tipsContent',
                    childs: [{
                        nodeType: 'h2',
                    }, {
                        nodeType: 'p',
                    }]
                }],
                onclick: function () {
                    this.remove()
                },
                onwebkitanimationend: function () {
                    if (!this.classList.contains('tipsWait')) {
                        this.remove()
                    }
                }
            },
            Progress: {
                nodeType: 'div',
                className: 'tips tipsWait',
                childs: [{
                    nodeType: 'div',
                    className: 'tipsIcon',
                    innerHTML: '<svg focusable="false" data-prefix="fas" data-icon="info-circle" class="svg-inline--fa fa-info-circle fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"></path></svg>'
                }, {
                    nodeType: 'div',
                    className: 'tipsContent',
                    childs: [{
                        nodeType: 'h2',
                    }, {
                        nodeType: 'p',
                        childs: [{
                            nodeType: 'div',
                            className: 'tipsProgress',
                            childs: [{
                                nodeType: 'div',
                                className: 'value',
                                attribute: {
                                    value: 0
                                }
                            }]
                        }]
                    }]
                }],
                onclick: function () {
                    if (this.querySelector('.tipsProgress .value').getAttribute('value') >= 100) this.remove()
                }
            },
            Success: {
                nodeType: 'div',
                className: 'tips tipsSuccess',
                childs: [{
                    nodeType: 'div',
                    className: 'tipsIcon',
                    innerHTML: '<svg focusable="false" data-prefix="fas" data-icon="check-circle" class="svg-inline--fa fa-check-circle fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"></path></svg>'
                }, {
                    nodeType: 'div',
                    className: 'tipsContent',
                    childs: [{
                        nodeType: 'h2',
                    }, {
                        nodeType: 'p',
                    }]
                }],
                onclick: function () {
                    this.remove()
                },
                onwebkitanimationend: function () {
                    if (!this.classList.contains('tipsWait')) {
                        this.remove()
                    }
                }
            }
        }
    }
*/
    class Tips extends React.Component {
        type: { Info: string; Warning: string; Success: string; };
        constructor(props: any) {
            super(props)
            this.type = {
                Info: '<svg focusable="false" data-prefix="fas" data-icon="info-circle" class="svg-inline--fa fa-info-circle fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"></path></svg>',
                Warning: '<svg focusable="false" data-prefix="fas" data-icon="exclamation-circle" class="svg-inline--fa fa-exclamation-circle fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"></path></svg>',
                Success: '<svg focusable="false" data-prefix="fas" data-icon="check-circle" class="svg-inline--fa fa-check-circle fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"></path></svg>'
            }
        }
        render() {
            return (reactRender({
                nodeType: 'div',
                className: 'tips tips' + this.props["type"],
                childs: [{
                    nodeType: 'div',
                    className: 'tipsIcon',
                    childs: this.type[this.props["type"]]
                }, {
                    nodeType: 'div',
                    className: 'tipsContent',
                    childs: [{
                        nodeType: 'h2',
                        childs: this.props["title"]
                    }, {
                        nodeType: 'p',
                        childs: this.props["content"]
                    }]
                }],
                onclick: () => {
                    this.props.tipsFinish({ title: this.props.title, content: this.props.content, type: this.props.type })
                },
                onwebkitanimationend: ({ target }: any) => {
                    if (!target.classList.contains('tipsWait')) {
                        this.props.tipsFinish({ title: this.props.title, content: this.props.content, type: this.props.type })
                    }
                }
            }))
        }
    }

    class PluginTips extends React.Component {
        static addEventListener(arg0: string, arg1: (e: any) => void, arg2: boolean) {
            throw new Error("Method not implemented.");
        }
        static querySelector(arg0: string) {
            throw new Error("Method not implemented.");
        }
        static appendChild(tips: any) {
            throw new Error("Method not implemented.");
        }
        static dispatchEvent(arg0: CustomEvent<{ id: any; name: any; value: number; }>) {
            throw new Error("Method not implemented.");
        }
        DownloadingQueue: Queue
        WaitingQueue: Queue
        dom: HTMLElement
        constructor(props: any) {
            super(props)
            this.DownloadingQueue = new Queue()
            this.WaitingQueue = new Queue()
            this.dom = undefined
            this.state = {
                TipsList: []
            }
            this.tipsFinish = this.tipsFinish.bind(this)
            this.Info = this.Info.bind(this)
        }
        downloadComplete(e: any) {
            try {
                this.DownloadingQueue.remove(e.detail.id)
                this.dom.querySelector('.tips[downloadid="' + e.detail.id + '"]').remove()
                if (this.WaitingQueue.length() > 0) {
                    let downloadTask = this.WaitingQueue.pop()
                    if (GM_info.downloadMode == 'native') {
                        main.Progress(downloadTask.name + ' 下载中...', {
                            id: downloadTask.id
                        })
                    } else {
                        main.Info('下载', downloadTask.name + ' 已开始下载!')
                    }
                    this.DownloadingQueue.push(downloadTask.task)
                    GM_download(downloadTask.task)
                }
            } catch (error) {
                console.log(e.detail.id)
            }
        }
        downloading(e: any) {
            try {
                let progress = this.dom.querySelector('.tips[downloadid="' + e.detail.id + '"]').querySelector('.tipsProgress .value')
                progress.setAttribute('value', e.detail.value.toFixed(2))
                progress.style.width = e.detail.value + '%'
            } catch (error) {
                console.log(e.detail.id)
            }
        }
        componentDidMount() {
            this.dom = ReactDOM.findDOMNode(this)
            this.dom.addEventListener('downloadComplete', this.downloadComplete, false)
            this.dom.addEventListener('downloading', this.downloading, false)
        }
        componentWillUnmount() {
            this.dom.removeEventListener('downloadComplete', this.downloadComplete, false)
            this.dom.removeEventListener('downloading', this.downloading, false)
        }
        tipsFinish(id: any) {
            let list = this.state.TipsList
            list.splice(this.state.TipsList.indexOf(id), 1)
            this.setState({
                TipsList: list
            });
        }
        Info(title: string, content: string) {
            let list = this.state.TipsList
            list.push({ title: title, content: content, type: 'Info' })
            this.setState({
                TipsList: list
            });
        }
        render() {
            return (new reactRender({
                nodeType: 'section',
                className: 'tipsContainer',
                childs: this.state.TipsList.forEach((item: any) => { React.createElement(Tips, { title: item.title, content: item.content, type: item.type, tipsFinish: this.tipsFinish.bind(this) }) })
            }))
        }
    }

    new sourceRender([{
        nodeType: 'div',
        id: 'PluginUI',
        parent: document.getElementById('user-links')
    }, {
        nodeType: 'div',
        id: 'PluginControlPanel',
        parent: document.body
    }, {
        nodeType: 'div',
        id: 'PluginTips',
        parent: document.body
    },{
        nodeType: 'style',
        innerHTML: `
        .controlPanel {
                display: none;
                position: fixed;
                z-index: 2147483646;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: auto;
                background-color: rgba(0, 0, 0, 0.4);
                scrollbar-width: none;
                -ms-overflow-style: none;
                overflow-x: hidden;
                overflow-y: auto;
            }
            .controlPanel::-webkit-scrollbar {
                display: none;
            }
            .controlPanel-content {
                background-color: #fefefe;
                margin: 15% auto;
                padding: 20px;
                border: 1px solid #888;
                width: 60%;
                max-width: 720px;
            }
            .controlPanelClose {
                color: #aaa;
                float: right;
                font-size: 28px;
                font-weight: bold;
            }
            .controlPanelClose:hover,
            .controlPanelClose:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }
        .selectButton {
            user-select: none;
            position: relative;
            width: 100%;
            height: 100%;
        }
        .selectButton[checked=true]:before {
            position: absolute;
            display: block;
            width: 100%;
            height: 100%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(150, 150, 150, 0.6);
            content: '';
        }
        .selectButton[checked=true]:after {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%) scale(1.32, 0.96);
            font-weight: 900;
            font-size: 36px;
            color: rgb(20, 20, 20);
            content: '√';
        }
        
        .tips {
            letter-spacing:3px;
            cursor: pointer;
            box-sizing: border-box;
            display: none;
            width: 100%;
            max-width: 640px;
            font-size: 0.825em;
            border-top-right-radius: 5px;
            border-top-left-radius: 5px;
            background: #ffffff;
            box-shadow: 0 2.8px 2.2px rgba(0, 0, 0, 0.02), 0 6.7px 5.3px rgba(0, 0, 0, 0.028), 0 12.5px 10px rgba(0, 0, 0, 0.035), 0 22.3px 17.9px rgba(0, 0, 0, 0.042), 0 41.8px 33.4px rgba(0, 0, 0, 0.05), 0 100px 80px rgba(0, 0, 0, 0.07);
            -webkit-transition: 0.2s ease-in;
            transition: 0.2s ease-in;
        }
        @media (min-width: 640px) {
            .tips {
                border-radius: 5px;
                margin-bottom: 0.5em;
            }
        }
        .tipsActive {
            display: -webkit-box;
            display: flex;
            -webkit-animation: slideinBottom 5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
            animation: slideinBottom 5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
        }
        .tipsWait {
            display: -webkit-box;
            display: flex;
            -webkit-animation: slidein 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
            animation: slidein 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
        }
        .tipsWarning {
            background: #bf360c;
            color: white;
        }
        .tipsSuccess {
            background: #43a047;
            color: white;
        }
        .tipsProgress {
            width: 100%;
            background-color: #ddd;
        }
        .tipsProgress .value {
            text-align: right;
            height: 24px;
            color: white;
            background-color: #2196F3;
            width: 0%;
            -webkit-transition: all 0.2s ease;
            -moz-transition: all 0.2s ease;
            -o-transition: all 0.2s ease;
            transition: all 0.2s ease;
        }
        .tipsProgress :after{
            content: attr(value)"%";
        }
        .tipsActions {
            width: 100%;
            max-width: 768px;
            margin: 0 auto;
            display: -webkit-box;
            display: flex;
            -webkit-box-orient: vertical;
            -webkit-box-direction: normal;
            flex-flow: column;
        }
        @media (min-width: 640px) {
            .tipsActions {
                -webkit-box-orient: horizontal;
                -webkit-box-direction: normal;
                flex-flow: row;
            }
        }
        .tipsContainer {
            z-index: 2147483647;
            box-sizing: border-box;
            padding: 0em 1em;
            position: fixed;
            width: 100%;
            max-width: 640px;
            margin: 0 auto;
            display: -webkit-box;
            display: flex;
            -webkit-box-orient: vertical;
            -webkit-box-direction: normal;
            flex-flow: column;
            bottom: 0;
            left: 0;
            right: 0;
            -webkit-box-align: center;
            align-items: center;
            -webkit-box-pack: center;
            justify-content: center;
        }
        @media (min-width: 640px) {
            .tipsContainer {
                padding: 0 1em;
            }
        }
        @media (min-width: 1024px) {
            .tipsContainer {
                left: initial;
                right: 0;
            }
        }
        .tipsIcon {
            height: 60px;
            width: 60px;
            box-sizing: border-box;
            padding: 1em;
            display: none;
            -webkit-box-align: center;
                align-items: center;
            -webkit-box-pack: center;
                justify-content: center;
        }
        .tipsIcon svg {
            height: 100%;
        }
        @media (min-width: 640px) {
            .tipsIcon {
                display: -webkit-box;
                display: flex;
            }
        }
        .tipsIcon ~ .tipsContent {
            padding: 1em;
        }
        @media (min-width: 640px) {
            .tipsIcon ~ .tipsContent {
                padding: 1em 1em 1em 0;
            }
        }
        .tipsContent {
            box-sizing: border-box;
            padding: 1em;
            width: 100%;
        }
        .tipsContent h2 {
            margin: 0 0 0.25em 0;
            padding: 0;
            font-size: 1.2em;
        }
        .tipsContent p {
            margin: 0;
            padding: 0;
            font-size: 1em;
        }
        @-webkit-keyframes slidein {
            0% {
                opacity: 0;
                -webkit-transform: translateY(100%);
                        transform: translateY(100%);
            }
            100% {
                opacity: 1;
                -webkit-transform: translateY(0);
                        transform: translateY(0);
            }
        }
        @keyframes slidein {
            0% {
                opacity: 0;
                -webkit-transform: translateY(100%);
                        transform: translateY(100%);
            }
            100% {
                opacity: 1;
                -webkit-transform: translateY(0);
                        transform: translateY(0);
            }
        }
        @-webkit-keyframes slideinBottom {
            0% {
                opacity: 0;
                -webkit-transform: translateY(100%);
                        transform: translateY(100%);
            }
            15% {
                opacity: 1;
                -webkit-transform: translateY(0);
                        transform: translateY(0);
            }
            85% {
                opacity: 1;
                -webkit-transform: translateY(0);
                        transform: translateY(0);
            }
            100% {
                opacity: 0;
                -webkit-transform: translateY(100%);
                        transform: translateY(100%);
            }
        }
        @keyframes slideinBottom {
            0% {
                opacity: 0;
                -webkit-transform: translateY(100%);
                        transform: translateY(100%);
            }
            15% {
                opacity: 1;
                -webkit-transform: translateY(0);
                        transform: translateY(0);
            }
            85% {
                opacity: 1;
                -webkit-transform: translateY(0);
                        transform: translateY(0);
            }
            100% {
                opacity: 0;
                -webkit-transform: translateY(100%);
                        transform: translateY(100%);
            }
        }
        `,
        parent: document.head
    }])
    ReactDOM.render(React.createElement(PluginControlPanel), document.getElementById('PluginControlPanel'));
    let test = ReactDOM.render(React.createElement(PluginTips), document.getElementById('PluginTips'));

    test.Info('test', 'test')
    
    //let PluginUI = new sourceRender(resources.PluginUI);
    //let PluginControlPanel = new sourceRender(resources.PluginControlPanel);
    //let PluginTips = new sourceRender(resources.PluginTips);

    //let PluginConfig = new Config();
    let DownloadingQueue = new Queue();
    let WaitingQueue = new Queue();
    const main = {
        Runing: false,
        Aria2WebSocket: null,
        start() {

            test.Info('test', 'test')
            test.Info('test', 'test')
            test.Info('test', 'test')



            debugger

            //main.Info('Iwara批量下载工具', '正在启动...')
            PluginConfig.sync()
            window.onclick = function (event: any) {
                if (!event.path.includes(PluginUI)) {
                    if (PluginUI.classList.contains('open')) {
                        PluginUI.classList.remove('open')
                    }
                }
            }
            PluginTips.addEventListener('downloadComplete', function (e: any) {
                try {
                    DownloadingQueue.remove(e.detail.id)
                    PluginTips.querySelector('.tips[downloadid="' + e.detail.id + '"]').remove()
                    if (WaitingQueue.length() > 0) {
                        let downloadTask = WaitingQueue.pop()
                        if (GM_info.downloadMode == 'native') {
                            main.Progress(downloadTask.name + ' 下载中...', {
                                id: downloadTask.id
                            })
                        } else {
                            main.Info('下载', downloadTask.name + ' 已开始下载!')
                        }
                        DownloadingQueue.push(downloadTask.task)
                        GM_download(downloadTask.task)
                    }
                } catch (error) {
                    console.log(e.detail.id)
                }
            }, false)
            PluginTips.addEventListener('downloading', function (e: any) {
                try {
                    let progress = PluginTips.querySelector('.tips[downloadid="' + e.detail.id + '"]').querySelector('.tipsProgress .value')
                    progress.setAttribute('value', e.detail.value.toFixed(2))
                    progress.style.width = e.detail.value + '%'
                } catch (error) {
                    console.log(e.detail.id)
                }
            }, false)
            if (PluginConfig.Initialize) {
                //正常启动
                main.run()
            } else {
                //首次启动
                document.getElementById('pluginSet')!.click()
            }
        },
        run() {
            if (!main.Runing) {


                for (let index = 0; index < document.querySelectorAll('.node-video').length; index++) {
                    const element = document.querySelectorAll('.node-video')[index]
                    if (!element.classList.contains('node-full')) {
                        let selectButton = document.createElement('div')
                        selectButton.classList.add('selectButton')
                        selectButton.setAttribute('checked', 'false')
                        selectButton.setAttribute('linkData', element.querySelector('a')!.href)
                        library.Dom.moveElement(selectButton, element.querySelector('a')!, true)
                        let clickTimer: any = null
                        selectButton.ondblclick = function (event) {
                            if (clickTimer) {
                                window.clearTimeout(clickTimer)
                                clickTimer = null
                            }
                            if (selectButton.getAttribute('checked') === 'true') {
                                selectButton.setAttribute('checked', 'false')
                            } else {
                                selectButton.setAttribute('checked', 'true')
                            }
                        }
                        selectButton.onclick = function () {
                            if (clickTimer) {
                                window.clearTimeout(clickTimer)
                                clickTimer = null
                            }
                            clickTimer = window.setTimeout(function () {
                                GM_openInTab(selectButton.getAttribute('linkData'), { active: true, insert: true, setParent: true })
                            }, 250)
                        }
                    }
                }
                if (window.location.href.split('/')[3] == 'users') {
                    document.getElementById('DownloadAll')!.style.display = 'inline'
                }
                //main.updata()

                main.Runing = true
                main.Success('Iwara批量下载工具', '已启动！')
            }
            switch (PluginConfig.DownloadType) {
                case DownloadType.aria2:
                    if (main.Aria2WebSocket != null) main.Aria2WebSocket.close()
                    main.ConnectionWebSocket()
                    break
                case DownloadType.default:
                    main.Warning('Iwara批量下载工具', '该下载模式为实验性模式，无法保证下载稳定性！', true)
                    break
                case DownloadType.others:
                    break
                default:
                    console.log('未知的下载模式!')
                    break
            }
        },
        Info(title: string, content: string, wait = false) {
            let tips = library.Dom.createElement(resources.Tips.Info)
            tips.querySelector('h2').innerText = title
            tips.querySelector('p').innerHTML = content
            PluginTips!.appendChild(tips)
            if (wait) {
                tips.classList.add('tipsWait')
            } else {
                tips.classList.add('tipsActive')
            }
        },
        Success(title: string, content: string, wait = false) {
            let tips = library.Dom.createElement(resources.Tips.Success)
            tips.querySelector('h2').innerText = title
            tips.querySelector('p').innerHTML = content
            PluginTips!.appendChild(tips)
            if (wait) {
                tips.classList.add('tipsWait')
            } else {
                tips.classList.add('tipsActive')
            }
        },
        Warning(title: string, content: string, wait = false) {
            let tips = library.Dom.createElement(resources.Tips.Warning)
            tips.querySelector('h2').innerText = title
            tips.querySelector('p').innerHTML = content
            PluginTips!.appendChild(tips)
            if (wait) {
                tips.classList.add('tipsWait')
            } else {
                tips.classList.add('tipsActive')
            }
        },
        Progress(title: string, content: object) {
            if (PluginTips.querySelector('.tips[downloadid="' + content.id + '"]') == null) {
                let tips = library.Dom.createElement(resources.Tips.Progress)
                tips.querySelector('h2').innerText = title
                tips.setAttribute('downloadid', content.id)
                PluginTips!.appendChild(tips)
            }
        },
        ConnectionWebSocket() {
            try {
                main.Info('Aria2 RPC', '正在连接...')
                main.Aria2WebSocket = new WebSocket(config.WebSocketAddress + 'jsonrpc')
                main.Aria2WebSocket!.onopen = wsopen
                main.Aria2WebSocket!.onmessage = wsmessage
                main.Aria2WebSocket!.onclose = wsclose
            } catch (err) {
                config.Initialize = false
                main.Aria2WebSocket!.close()
                main.Warning('Aria2 RPC', '连接 Aria2 RPC 时出现错误! <br />请检查Aria2 RPC WebSocket地址是否正确(尽量使用wss而非ws) <br />' + err)
            }
            function wsopen() {
                main.Success('Aria2 RPC', '连接成功!')
            }
            function wsmessage() {
                //todo 接收信息
            }
            function wsclose() {
                main.Warning('Aria2 RPC', '已断开连接！')
            }
        },
        async ManualParseDownloadAddress() {
            let ID = prompt('请输入需要下载的视频ID', '')
            if (ID!.split('_')[1] != undefined) {
                ID = ID!.split('_')[1]
            }
            await main.ParseDownloadAddress(ID!)
            main.Success('下载', '解析完成!')
        },
        async DownloadSelected() {
            main.Info('下载', '开始解析...')
            for (let index = 0; index < document.getElementsByClassName('node-video').length; index++) {
                const element = document.getElementsByClassName('node-video')[index]
                if (!element.classList.contains('node-full')) {
                    if (element.getElementsByClassName('selectButton')[0].getAttribute('checked') === 'true') {
                        await main.ParseDownloadAddress(element)
                    }
                }
            }
            main.Success('下载', '已全部解析完成!')
        },
        async DownloadAll() {
            main.Info('下载', '开始解析...')
            if (document.getElementById('block-views-videos-block-2')!.getElementsByClassName('more-link').length == 0) {
                let videoListPage = library.Dom.parseDom(await library.Net.get(window.location.href, undefined, window.location.href))
                let videosList = videoListPage.querySelector('#block-views-videos-block-2')!.querySelectorAll('.node-video')
                for (let index = 0; index < videosList.length; index++) {
                    const element = videosList[index]
                    await main.ParseDownloadAddress(element)
                }
                main.Success('下载', '已全部解析完成!')
            } else {
                await main.GetAllData(document.querySelector('div.more-link')!.querySelector('a')!.href, [], window.location.href)
            }
        },
        async GetAllData(videoListUrl: string, data: string[], referrer: string) {
            let videoListPage = library.Dom.parseDom(await library.Net.get(videoListUrl, data, referrer))
            let videosList = videoListPage.querySelector('.view-videos')!.querySelectorAll('.node-video')
            for (let index = 0; index < videosList.length; index++) {
                const element = videosList[index]
                await main.ParseDownloadAddress(element)
            }
            if (videoListPage.getElementsByClassName('pager-next').length != 0) {
                await main.GetAllData(videoListPage.getElementsByClassName('pager-next')[0].querySelector('a')!.href, data, referrer)
            }
            main.Success('下载', '已全部解析完成!')
        }
        },
        DownloadLinkCharacteristics: [
            '/s/',//度盘
            'mega.nz/file/',//Mega
            'drive.google.com',//Google Drive
            '高画質'//自定义
        ],
        CheckIsHaveDownloadLink(comment: string) {
            if (comment == null) return false
            for (let index = 0; index < main.DownloadLinkCharacteristics.length; index++) {
                if (comment.indexOf(main.DownloadLinkCharacteristics[index]) != -1) return true
            }
            return false
        },
        async ParseDownloadAddress(Data: string | Element) {
            let videoInfo = await main.VideoInfo.createNew(Data)
            if (videoInfo.getLock()) {
                main.Warning('警告', '<a href="' + videoInfo.getUrl() + '" title="' + videoInfo.getName() + '" target="_blank" >' + videoInfo.getName() + '</a> 该视频已锁定! <br />请等待作者同意您的添加好友申请后再重试!')
            } else {
                if (main.CheckIsHaveDownloadLink(videoInfo.getComment())) {
                    main.Warning('警告', '<a href="' + videoInfo.getUrl() + '" title="' + videoInfo.getName() + '" target="_blank" >' + videoInfo.getName() + '</a> 发现疑似第三方高画质下载链接,请手动处理!', true)
                } else {
                    if (videoInfo.getDownloadQuality() == 'Source') {
                        main.SendDownloadRequest(videoInfo, document.cookie)
                    } else {
                        main.Warning('警告', '<a href="' + videoInfo.getUrl() + '" title="' + videoInfo.getName() + '" target="_blank" >' + videoInfo.getName() + '</a> 没有解析到原画下载地址,请手动处理!', true)
                    }
                }
            }
        },
        defaultDownload(Info: object) {
            /*
            config.DownloadDir.replace(/\\\\/g, '/') + Info.getAuthor().replace(/[\\\\/:*?\"<>|.]/g, '') + '/' + 
            */
            (function (ID, Name, DownloadUrl) {
                let Task = {
                    url: DownloadUrl,
                    name: Name.replace(/[\\\\/:*?\"<>|]/g, '') + '[' + ID + '].mp4',
                    saveAs: false,
                    onload: function () {
                        PluginTips.dispatchEvent(new CustomEvent('downloadComplete', { detail: { id: ID, name: Name, value: 100 } }))
                        main.Success('下载', Name + ' 下载完成!')
                    },
                    onerror: function (error: any) {
                        PluginTips.dispatchEvent(new CustomEvent('downloadComplete', { detail: { id: ID, name: Name, value: 100 } }))
                        main.Warning('下载', Name + ' 下载失败! <br />错误报告: ' + JSON.stringify(error))
                    },
                    onprogress: function (progress: { lengthComputable: any; position: number; totalSize: number; }) {
                        if (progress.lengthComputable) {
                            PluginTips.dispatchEvent(new CustomEvent('downloading', { detail: { id: ID, name: Name, value: progress.position / progress.totalSize * 100 } }))
                        }
                    },
                    ontimeout: function () {
                        PluginTips.dispatchEvent(new CustomEvent('downloadComplete', { detail: { id: ID, name: Name, value: 100 } }))
                        main.Warning('下载', Name + ' 下载超时! ')
                    }
                }
                if (DownloadingQueue.length() < 4) {
                    DownloadingQueue.push({ id: ID, name: Name, task: Task })
                    GM_download(Task)
                    if (GM_info.downloadMode == 'native') {
                        main.Progress(Name + ' 下载中...', {
                            id: ID
                        })
                    } else {
                        main.Info('下载', Name + ' 已开始下载!')
                    }
                } else {
                    WaitingQueue.push({ id: ID, name: Name, task: Task })
                }
            }(Info.getID(), Info.getName(), Info.getDownloadUrl()))
        },
        aria2Download(Info: any, Cookie: string) {
            let Action = {
                'jsonrpc': '2.0',
                'method': 'aria2.addUri',
                'id': config.WebSocketID,
                'params': [
                    'token:' + config.WebSocketToken,
                    [Info.getDownloadUrl()],
                    {
                        'referer': 'https://ecchi.iwara.tv/',
                        'header': [
                            'Cookie:' + Cookie
                        ],
                        'out': '![' + Info.getID() + ']' + Info.getName().replace(/[\\\\/:*?\"<>|]/g, '') + '.mp4',
                        'dir': config.DownloadDir + Info.getAuthor().replace(/[\\\\/:*?\"<>|.]/g, '')
                    }
                ]
            }
            if (config.DownloadProxy != '') {
                Action.params[Action.params.length - 1]['all-proxy'] = config.DownloadProxy
            }
            main.Aria2WebSocket!.send(JSON.stringify(Action))
            main.Info('提示', '已将 ' + Info.getName() + ' 的下载地址推送到Aria2!')
        },
        async SendDownloadRequest(Info: object, Cookie: string) {
            switch (config.DownloadType) {
                case config.Type.Download.aria2:
                    main.aria2Download(Info, Cookie)
                    break
                case config.Type.Download.default:
                    //main.Warning('警告', '默认下载方式存在问题，暂时停止使用。<br>已调用其他方式下载！')
                    main.defaultDownload(Info)
                    break
                case config.Type.Download.others:
                    main.Info('提示', '已将下载请求提交给浏览器!')
                    GM_openInTab(Info.getDownloadUrl(), { active: true, insert: true, setParent: true })
                    break
                default:
                    main.Warning('配置错误', '未知的下载模式!')
                    break
            }
        }
    }
    main.start();
    window.onbeforeunload = function () {
        config.stopSync();
    };
})();